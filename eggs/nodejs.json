{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PANEL",
    "meta": {
        "update_url": null,
        "version": "FR_v1"
    },
    "exported_at": "2025-01-28T20:00:00+00:00",
    "name": "NodeJS",
    "author": "hugo@hypeprotect.fr",
    "description": "Un egg pour les projets NodeJS",
    "features": null,
    "docker_images": {
        "Nodejs 12": "ghcr.io/parkervcp/yolks:nodejs_12",
        "Nodejs 14": "ghcr.io/parkervcp/yolks:nodejs_14",
        "Nodejs 16": "ghcr.io/parkervcp/yolks:nodejs_16",
        "Nodejs 17": "ghcr.io/parkervcp/yolks:nodejs_17",
        "Nodejs 18": "ghcr.io/parkervcp/yolks:nodejs_18",
        "Nodejs 19": "ghcr.io/parkervcp/yolks:nodejs_19",
        "Nodejs 20": "ghcr.io/parkervcp/yolks:nodejs_20",
        "Nodejs 21": "ghcr.io/parkervcp/yolks:nodejs_21",
        "Nodejs 22": "ghcr.io/parkervcp/yolks:nodejs_22",
        "Nodejs 23": "ghcr.io/parkervcp/yolks:nodejs_23"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] \u0026\u0026 [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; if [[ \"${MAIN_FILE}\" == \"*.js\" ]]; then /usr/local/bin/node \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; else /usr/local/bin/ts-node --esm \"/home/container/${MAIN_FILE}\" ${NODE_ARGS}; fi",
    "config": {
        "files": "{}",
        "logs": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \"Change ce texte 1\",\r\n        \"Change ce texte 2\"\r\n    ]\r\n}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "container": "node:18-bookworm-slim",
            "entrypoint": "bash",
            "script": "#!/bin/bash\r\n# NodeJS App Installation Script\r\n#\r\n# Server Files: /mnt/server\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest --location=global\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] \u0026\u0026 [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\n\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    /usr/local/bin/npm install --production\r\nfi\r\n\r\necho -e \"install complete\"\r\nexit 0"
        }
    },
    "variables": [
        {
            "name": "Adresse du dépôt GitHub",
            "description": "Format : https://github.com/HugoLapresse/repo_name",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Branche à installer",
            "description": "Format : main",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Fichiers téléchargés par l'utilisateur",
            "description": "Ignorer toutes les étapes d'installation si vous laissez un utilisateur télécharger des fichiers.\r\n\r\n0 = faux (par défaut)\r\n1 = vrai",
            "env_variable": "USER_UPLOAD",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Mise à jour automatique",
            "description": "Mettre les derniers fichiers au démarrage lors de l'utilisation d'un dépôt GitHub.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Installation de package NodeJS",
            "description": "Format : axios",
            "env_variable": "NODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Nom d'utilisateur GitHub",
            "description": "Nom d'utilisateur pour s'authentifier avec GitHub.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Token d'accès Git",
            "description": "Token à utiliser avec GitHub.\r\n\r\nIl est préférable d'utiliser un token d'accès personnel.\r\nhttps://github.com/settings/tokens\r\nhttps://gitlab.com/-/profile/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Désinstallation de package NodeJS",
            "description": "Format : axios",
            "env_variable": "UNNODE_PACKAGES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Fichier principal",
            "description": "Format : index.js",
            "env_variable": "MAIN_FILE",
            "default_value": "index.js",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:16",
            "field_type": "text"
        },
        {
            "name": "Arguments supplémentaires",
            "description": "Tous les arguments supplémentaires pour nodejs ou ts-node",
            "env_variable": "NODE_ARGS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:64",
            "field_type": "text"
        }
    ]
}